plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.meli'
version = '1.0'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.reactivecommons:async-commons-rabbit-starter:1.0.4'
	implementation 'org.reactivecommons:async-commons-starter:1.0.0-beta3'
	implementation 'io.projectreactor:reactor-core:3.4.17'

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'

	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'junit:junit:4.13.2'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
	toolVersion = "0.8.7"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
	reports {
		xml {
			enabled true // coveralls plugin depends on xml format report
		}

		html {
			enabled true
		}
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/meli/jupiter/infrastructure/**',
					'com/meli/jupiter/domain/model/**',
					'com/meli/jupiter/utils/**',
					'com/meli/jupiter/*Jupiter*.*'
			])
		}))
	}
}
